#######################################################
#
# example config file for calcardbackup
# ---------------------------------------
#
# This file is only needed if you don't want to use command line options.
#
# You can copy this file to any location, then use option -c|--configfile PATH_TO_FILE,
# or place this file in script's directory and don't pass ownCloud/Nextcloud path to script.
# If calcardbackup is being run with using a configfile like this, all options given on
# command line except for -b|--batch are being ignored.
#
# All paths in this config file need to be relative to this files location or absolute paths!
#
# Don't forget to create file 'users.txt' with username and corresponding password,
# separated by a colon, one user per line.
# See files 'README.md' and 'users.txt.example'
# NOTE: file 'users.txt' is not necessarily needed anymore, if parameter fetch_from_database
# is being set to "yes" (see below)
#
# For clarification, the associated command line options are given in comments.
#
#######################################################


# path to ownCloud/Nextcloud installation
# this is mandatory:

nextcloud_path="/usr/share/nginx/www/"


# The script tries to automatically detect the URL of ownCloud/Nextcloud,
# which should work in most cases for versions >= 7.0
# For versions < 7.0 this is mandatory to be changed to suit your setup!
# correlates to option -a|--address
# URL of Own-/Nextcloud Login-page:

nextcloud_url="https://www.my_nextcloud.net/"


# Will cURL trust the servers certificate?
# If you have a self signed certificate you might have to change this to "no"
# correlates to option -s|--selfsigned

trustful_certificate="yes"


# path to file with usernames and passwords (see 'README.md' and 'users.txt.example')
# if not declared, file 'users.txt' in script's directory will be used.
# NOTE: this file is not needed anymore if parameter 'fetch_from_database' is
#       set to "yes" below!
# correlates to option -u|--usersfile

users_file="users.txt"


# path to folder where backed up files will be saved.
# if not declared, folder 'backups/' in script's directory will be created and used.
# correlates to option -o|--output

backupfolder="backups/"


# format of date extension for backup files. Default is "-%Y-%m-%d" resulting
# in backup files named e.g. "calcardbackup-2017-03-23.tar.gz"
# for syntax, have a look at format options under "man date"
# correlates to option -d|--date

date_extension="-%Y-%m-%d"


# delete old backup files after how many days?
# the default value of "0" means to never delete backups
# correlates to option -r|--remove

delete_backups_older_than="0"


# change to "no" to not compress backup files
# find your files then in a backup directory instead of compressed file
# if you plan to encrypt your backup, this has to be "yes"
# correlates to option -x|--uncompressed

compress="yes"


# change to "zip" to compress backup as zip (instead of tar.gz)
# package "zip" needs to be installed.
# correlates to option -z|--zip

compression_method="tar.gz"


# change first line to "yes" and give a passphrase in the second line to encrypt
# compressed backup with given passphrase by GnuPG (symmetric AES256).
# correlates to option -e|--encrypt
# pay attention to the comments about encryption in 'README.md'!

encrypt_backup="no"
gpg_passphrase="1234"


# change to "no" if you do not want to backup the according category
# correlates to options -na|--no-addressbooks, -nc|--no-calendars

backup_addressbooks="yes"
backup_calendars="yes"


# calcardbackup is traditionally backing up calendars and addressbooks by downloading
# the according files from the ownCloud/Nextcloud webinterface. However, with large
# addressbooks, this can lead to timeouts resulting in calcardbackup not being able to
# backup large addressbooks.
# calcardbackup version 0.7.0 brings the possibility to create calendar and addressbook
# backups by fetching the data directly from the database which speeds up the backup
# process for addressbooks massively resulting in much less server load. This is why it
# is highly recommended to change this value to "yes".
# NOTE 1: there is no need anymore to specify passwords in users.txt when using this option.
# NOTE 2: it gets even better: there is no need anymore to use a file with user credentials
#         because calcardbackup doesn't need anymore to authenticate against ownCloud/Nextcloud
#         server since data is fetched from the database. So if calcardbackup doesn't find
#         the file with user credentials it just will backup all calendars/addressbooks
#         from the database.
# NOTE 3: In the next version of this script the default will be "yes" for this option.
# change to "yes" if you want to create backups of calendars/addressbooks by fetching data
# directly from the database (recommended!)
# correlates to option -f|--fetch-from-database

fetch_from_database="no"


# change to "yes" if you want to backup shared addressbooks/calendars as well.
# This may be used to provide just one username with according password in 'users.txt',
# to whom all items, needed to be backed up, are shared. With that approach, only
# this user's password will be compromised in case 'users.txt' gets in wrong hands.
# NOTE: if fetch_from_database is set to "yes" and file users.txt is missing, this
#       option will be ignored.
# correlates to option -i|--include-shares

include_shares="no"


# if you are running nextcloud-snap (https://github.com/nextcloud/nextcloud-snap),
# you need to change this value to "yes" and use as path to nextcloud
# the path to the nextcloud configuration files. If you haven't changed anything, this
# will be: /var/snap/nextcloud/current/nextcloud/
# Note that calcardbackup needs to be run with sudo when used with snap installations.
# See example No.6 in README.md
# correlates to option -p|--snap

snap="no"


########  end of config file for calcardbackup  ########
