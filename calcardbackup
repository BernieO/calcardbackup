#!/bin/bash

# calcardbackup by BernieO - extracts Own-/Nextcloud calendars and addressbooks
# Source: https://github.com/BernieO/calcardbackup
# Copyright (C) 2017 BernieO
#
# This script is licensed under the GNU AFFERO GENERAL PUBLIC LICENSE v3.0
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


#######################################################
#
# main configuration needs to be in ./calcardbackup.conf (see calcardbackup.conf.example)
# if calcardbackup.conf needs to be outside this scripts directory change following path:
#config_path="./"
#
#######################################################



#######################################################
#######################################################
##                                                   ##
##    Don't touch  anything below unless you know    ##
##           exactly what you are doing!             ##
##                                                   ##
#######################################################
#######################################################


get_absolute_path() {
  # change relative to absolute path; remove trailing slash:
  if [[ ! "${1}" = /* ]]; then
    absolute_path=$(readlink -m "${script_dir}/${1}")
  else
    absolute_path=$(readlink -m "${1}")
  fi
  echo ${absolute_path}
}

check_readable_file() {
  # checks if path is file and readable. $2 is verbal explanation of of file for error message.
  if [ ! -f "${1}" ] || [ ! -r "${1}" ]; then
    error_exit "ERROR: Can't read ${2}" "I need to be able to read ${1}"
  fi
}

preparations() {
  # print timestamp
  printf "\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
  echo "+"
  echo "+  $(date) --> START calcardbackup"
  echo "+  Checking dependencies and preparing..."

  # check for packages curl, sed, grep
  which curl > /dev/null || error_exit "ERROR: Package 'curl' is needed for running this script." "Install with 'apt-get install curl' and run script again"
  which sed > /dev/null || error_exit "ERROR: Package 'sed' is needed for running this script." "Install with 'apt-get install sed' and run script again"
  which grep > /dev/null || error_exit "ERROR: Package 'grep' is needed for running this script." "Install with 'apt-get install grep' and run script again"

  # get path to scripts dir:
  actual_path=$(readlink -f "${BASH_SOURCE[0]}")
  script_dir=$(dirname "$actual_path")

  # assign default values:
  config_path=${config_path:-"./"}
  nextcloud_path="/usr/share/nginx/www"
  nextcloud_url="https://www.example.com"
  trustful_certificate="yes"
  userstxt_path="./"
  backupfolder="backups"
  backupfile_date_extension="-%Y-%m-%d"
  backup_database="no"
  delete_backups_older_than="0"
  compression_method="tar.gz"
  compression_level="6"
  hook="no"

  # absolute path to config file:
  config_path=$(get_absolute_path "${config_path}")

  # check if config file is a file and readable:
  check_readable_file "${config_path}/calcardbackup.conf" "calcardbackups config file."
  # check config file for correct syntax (only comments, variable declarations and empty lines allowed)
  grep -E -qv '^([[:space:]]*|[[:space:]]*[a-z_]+="[^"]+"[[:space:]]*)(#.*)?$' "${config_path}/calcardbackup.conf"
  [ "$?" -eq 0 ] && error_exit "ERROR: invalid config file! only variable-declarations, comments and empty lines allowed." "Edit configuration file and run sript again."
  # config file is readable and has correct syntax. So let's include it now:
  . "${config_path}/calcardbackup.conf"

  # remove trailing slashes from nextcloud_path and nextcloud_url:
  nextcloud_path=$(readlink -m "$nextcloud_path")
  nextcloud_url=$(echo "$nextcloud_url" | sed 's:/*$::')
  # location of Nextclouds config.php:
  configphp="${nextcloud_path}/config/config.php"

  # check trustful_certificate for valid value:
  if [[ ! ${trustful_certificate} =~ (yes|no) ]]; then
    echo "-- NOTICE: Parameter 'trustful_certificate' is not valid (allowed is only \"yes\" or \"no\")."
    echo "-- NOTICE: Using default value instead: trustful_certificate=\"yes\""
    trustful_certificate="yes"
  fi
  # assign insecure-option for curl, depending on certificates trustfullness:
  [ "${trustful_certificate}" == "yes" ] && trust=""
  [ "${trustful_certificate}" == "no" ] && trust="--insecure"

  # absolute path to users.txt:
  userstxt_path=$(get_absolute_path "${userstxt_path}")
  # check if users.txt is a file and readable:
  check_readable_file "${userstxt_path}/users.txt" "file with usernames and passwords."

  # absolute path to backupfolder:
  backupfolder=$(get_absolute_path "${backupfolder}")

  # make sure the configured date format in $backupfile_date_extension is valid:
  if [ ! $(date +"${backupfile_date_extension}" 2>/dev/null) ]; then
    echo "-- NOTICE: Parameter 'backupfile_date_extension' has no valid format (check 'man date' for valid formats)."
    echo "-- NOTICE: Using default value instead: backupfile_date_extension=\"-%Y-%m-%d\""
    backupfile_date_extension="-%Y-%m-%d"
  fi

  # check $backup_database for valid value:
  if [[ ! ${backup_database} =~ ^(yes|no)$ ]]; then
    echo "-- NOTICE: Parameter 'backup_database' is not valid (only \"yes\" or \"no\" allowed)."
    echo "-- NOTICE: Using default value instead: backup_database=\"no\""
    backup_database="no"
  fi

  # make sure delete_backups_older_than is a positive integer and set it to 0 if not:
  if [[ ! ${delete_backups_older_than} =~ ^[0-9]+$ ]]; then
    echo "-- NOTICE: Parameter 'delete_backups_older_than' is not a positive number."
    echo "-- NOTICE: Using default value instead (not deleting anything): delete_backups_older_than=\"0\""
    delete_backups_older_than="0"
  fi

  if [ "$compression_method" == "zip" ]; then
    # check for package zip
    which zip > /dev/null || error_exit "ERROR: You chose to compress backed up files with 'zip' instead of 'tar.gz'." "Therefore package 'zip' is needed. Install with 'apt-get install zip' and run script again"
  elif [ "${compression_method}" != "tar.gz" ]; then
    echo "-- NOTICE: Parameter 'compression_method' is not valid (only \"zip\" or \"tar.gz\" allowed)."
    echo "-- NOTICE: Using default value instead: compression_method=\"tar.gz\""
    compression_method="tar.gz"
  fi

  # make sure compression_level has a valid value (1-9)
  if [[ ! ${compression_level} =~ ^[1-9]$ ]]; then
    echo "-- NOTICE: Parameter 'compression_level' is not a number between 1-9."
    echo "-- NOTICE: Using default value instead: compression_level=\"6\""
    compression_level="6"
  fi

  # check $hook for valid value:
  if [[ ! ${hook} =~ ^(yes|no)$ ]]; then
    echo "-- NOTICE: Parameter 'hook' is not valid (only \"yes\" or \"no\" allowed)."
    echo "-- NOTICE: Using default value instead: hook=\"no\""
    hook="no"
  fi
  if [ "${hook}" == "yes" ]; then
    if [ ! -f "${script_dir}/hook" ]; then
      echo "-- NOTICE: You chose to run own commands in hook file. But file '${script_dir}/hook' does not exist."
      default_hook=1
    elif [ ! -x "${script_dir}/hook" ]; then
      echo "-- NOTICE: You chose to run own commands in hook file. But I don't have permission to run '${script_dir}/hook'"
      default_hook=1
    fi
    [ "${default_hook}" == "1" ] && echo "-- NOTICE: Ignoring hook=\"yes\". Using default value \"no\" instead." && hook="no"
  fi
}

getvalue_from_configphp() {
  # reads a line with a given paramter from config.php and echoes the parameters value:
  value=$(grep "$1" "$configphp")
  value=${value%\'*}
  value=${value##*\'}
  echo $value
}

read_config_php() {
  # reads config.php and assigns different paramters we need to know
  # check whether Nextclouds config-file is readable:
  check_readable_file "${configphp}" "configuration file of your Own-/Nextcloud installation."

  # get version of Nextcloud to configure correct dav-endpoint:
  version_config_php=$(getvalue_from_configphp "version")
  # get version number
  mainversion=${version_config_php%%.*}
  minimumversion="5"
  davchangeversion="9"
  if [ "$mainversion" -lt "$minimumversion" ]; then
    error_exit "ERROR: This script only works with versions >= 5.0." "You are using Owncloud $version_config_php."
  elif [ "$mainversion" -ge "$davchangeversion" ]; then
    # Values for Nextcloud >= 9.0:
    caldav="dav"
    carddav="dav"
    table_calendars="oc_calendars"
    table_addressbooks="oc_addressbooks"
    row_principaluri="principaluri"
    row_uri="uri"
    row_displayname="displayname"
    # correction of export-link of addressbooks for Nextcloud >= 9.0:
    extra_users="users/"
  else
    # Values for Owncloud < 9.0:
    caldav="caldav"
    carddav="carddav"
    table_calendars="oc_clndr_calendars"
    table_addressbooks="oc_contacts_addressbooks"
    row_principaluri="userid"
    row_uri="uri"
    row_displayname="displayname"
    # must be empty for Owncloud < 9.0:
    extra_users=""
  fi

  # get nextcloud_url from config.php or from config file and error, if something is weird:
  nextcloud_url_default="https://www.example.com"
  nextcloud_url_overwrite=$(getvalue_from_configphp "overwrite.cli.url")
  if [ "$nextcloud_url" != "$nextcloud_url_default" ] && [ "$nextcloud_url" != "$nextcloud_url_overwrite" ] && [ "$nextcloud_url_overwrite" != "" ]; then
    # use overwrite.cli.uri and print Warning, if nextcloud_url has been configured to something other than default or overwrite.cli.url
    # (last test in if statement above: make sure overwrite.cli.url is present and not empty):
    echo "--"
    echo "-- WARNING: Configured Nextcloud-URL differs from 'overwrite.cli.url' in config.php"
    echo "-- ${nextcloud_url}/   ==>   configured as nextcloud_url in config file ${config_path}/calcardbackup.conf"
    echo "-- ${nextcloud_url_overwrite}/   ==>   detected in $configphp"
    echo "-- Using the latter one!"
    echo "--"
    nextcloud_url=$nextcloud_url_overwrite
  elif [ "$nextcloud_url" == "$nextcloud_url_default" ] && [ "$nextcloud_url_overwrite" == "" ]; then
    # Error, if nextcloud_url is on default value and config.php contains no overwrite.cli.url (or is empty)
    error_exit "ERROR: Can't retrieve url from ${configphp}" "In your case nextcloud_url needs to be configured in config file ${config_path}/calcardbackup.conf"
  elif [ "$nextcloud_url_overwrite" != "" ]; then
    # if overwrite.cli.uri is found (and nextcloud_url is on default value): use it as nextcloud_url
    nextcloud_url=$nextcloud_url_overwrite
  fi
  # Print url which will be used:
  echo "+  Using URL ${nextcloud_url}"
}

read_status_php() {
  # check whether URL to Own-/Nextcloud is correct and store productname (Owncloud/Nextcloud):
  status_php=$(curl -s $trust "${nextcloud_url}/status.php")
  cerror=$?
  [ "${cerror}" -ne 0 ] && curl_error

  # check whether Own-/Nextcloud can be found at nextcloud_url with return of status.php
  # check regex with regex101.com (checked with versions mentioned below)
  # Output of status.php of the different versions:
  # Owncloud 5.0.9   {"installed":"true","version":"5.0.38","versionstring":"5.0.19","edition":""}
  # Owncloud 6.0.9   {"installed":"true","version":"6.0.9.2","versionstring":"6.0.9","edition":""}
  # Owncloud 7.0.15  {"installed":"true","version":"7.0.15.2","versionstring":"7.0.15","edition":""}
  # Owncloud 8.0.16  {"installed":true,"maintenance":false,"version":"8.0.16.3","versionstring":"8.0.16","edition":""}
  # Owncloud 8.1.12  {"installed":true,"maintenance":false,"version":"8.1.12.2","versionstring":"8.1.12","edition":""}
  # Owncloud 8.2.10  {"installed":true,"maintenance":false,"version":"8.2.10.2","versionstring":"8.2.10","edition":""}
  # Owncloud 9.0.8   {"installed":true,"maintenance":false,"version":"9.0.8.2","versionstring":"9.0.8","edition":""}
  # Owncloud 9.1.4   {"installed":true,"maintenance":false,"version":"9.1.4.2","versionstring":"9.1.4","edition":""}
  # Owncloud 10 alpha{"installed":"true","maintenance":"false","needsDbUpgrade":"false","version":"10.0.0.4","versionstring":"10.0.0 alpha","edition":"Community","productname":"ownCloud"}
  # Nextcloud 9.0.57 {"installed":true,"maintenance":false,"version":"9.0.57.2","versionstring":"9.0.57","edition":""}
  # Nextcloud 10.0.4 {"installed":true,"maintenance":false,"version":"9.1.4.2","versionstring":"10.0.4","edition":""}
  # Nextcloud 11.0.2 {"installed":true,"maintenance":false,"needsDbUpgrade":false,"version":"11.0.2.7","versionstring":"11.0.2","edition":"","productname":"Nextcloud"}
  grep -E -q '^\{"installed":"?(true|false)"?,("maintenance":"?(true|false)"?,("needsDbUpgrade":"?(true|false)"?,)?)?"version":"[[:digit:]]{1,2}\.[[:digit:]]\.[[:digit:]]{1,2}(\.[[:digit:]]{1,2})?","versionstring":"[[:digit:]]{1,2}\.[[:digit:]]\.[[:digit:]]{1,2}","edition":"[^"]*"(,"productname":"(ownCloud|Nextcloud)")?\}$' <<< $status_php
  if [ $? != 0 ]; then
    error_exit "ERROR: No Own-/Nextcloud Installation found at ${nextcloud_url} !"
  fi

  # get version from status.php:
  version_status_php=${status_php#*version\":\"}
  version_status_php=${version_status_php%%\"*}
  # get versions first number (needed for detection of Nextcloud 10):
  mainversion_status_php=${version_status_php%%.*}
  # get versionstring from status_php (needed for detection of Nextcloud 9):
  versionstring_status_php=${status_php#*versionstring\":\"}
  versionstring_status_php=${versionstring_status_php%%\"*}

  productname="ownCloud"

  # set productname to Nextcloud if status.php delivers it (this is the case for Nextcloud >= 11.0):
  grep -E -q '"productname":"Nextcloud"' <<< $status_php && productname="Nextcloud"

  # for mainversion 9 we need to find out whether product is ownCloud 9.x or Nextcloud 9.x or Nextcloud 10.x
  if [ "${mainversion_status_php}" -eq "9" ]; then

    # Nextcloud 10 has different main version numbers in version and versionstring delivered by status.php:
    # get main version number from versionstring:
    mainversionstring_status_php=${versionstring_status_php%%.*}

    # Nextcloud 9 has last number of greater or equal than 50 in versionstring (first tagged version on github was 9.0.50):
    # get last number of versionstring:
    lastversionstring_status_php=${versionstring_status_php##*.}

    if [ "${mainversion_status_php}" -lt "${mainversionstring_status_php}" ] || [ "${lastversionstring_status_php}" -ge 50 ]; then
      productname="Nextcloud"
    fi
  fi

  echo "+  ${productname} ${versionstring_status_php} detected."

  # check whether version of config.php is the same than version of status.php
  if [ "$version_status_php" != "$version_config_php" ]; then
    error_exit "ERROR: different versions detected:" "${productname} ${version_status_php} found at ${nextcloud_url}" "${productname} ${version_config_php} found at ${nextcloud_path}" "check configured url and path in config file '${config_path}/calcardbackup.conf'"
  fi

  # check for installed=true (and maintenance=false for versions >=8) in status.php
  grep -E -q '"installed":"?true"?' <<< $status_php || error_exit "ERROR: ${nextcloud_url}/status.php does not contain \"installed\":\"true\"!" "You need to check your ${productname} Installation!"
  if [ "$mainversion" -ge 8 ]; then
    grep -E -q '"maintenance":"?false"?' <<< $status_php || error_exit "ERROR: ${productname} is in maintenance mode!" "Disable maintenance mode with command \"sudo -u www-data php ${nextcloud_path}/occ maintenance:mode --off\" and run script again"
  fi
}

get_database_details() {
  # get database details:
  dbtype=$(getvalue_from_configphp "dbtype")
  case "$dbtype" in
    mysql)
      dbname=$(getvalue_from_configphp "dbname")
      dbhost=$(getvalue_from_configphp "dbhost")
      dbuser=$(getvalue_from_configphp "dbuser")
      dbpassword=$(getvalue_from_configphp "dbpassword")
      mysql_options="-h ${dbhost} -u${dbuser} -p${dbpassword} ${dbname} -se"
      database="MySQL/MariaDB"
    ;;
    sqlite3)
      # check if command-line-interface of sqlite3 is installed:
      which sqlite3 > /dev/null || error_exit "ERROR: ${productname} database is sqlite3. Therefore this script requires package 'sqlite3'." "Install with 'apt-get install sqlite3' and run script again"
      datadirectory=$(getvalue_from_configphp "datadirectory")
      sqlite3_database="${datadirectory}/owncloud.db"
      database="SQLite3"
      # check if sqlite3-database-file is readable:
      check_readable_file "${sqlite3_database}" "${productname}s SQLite3 database."
    ;;
    *)
      error_exit "ERROR: Unsupported Database type: ${dbtype}" "Only MySQL/MariaDB and SQLite3 are supported."
    ;;
  esac
  echo "+  Database of chosen ${productname} installation is ${database}."
}

read_users_txt() {
  # Reads file users.txt:
  readarray -t users < "${userstxt_path}/users.txt"
  for i in "${!users[@]}"
  do
    user[$i]=${users[$i]%%:*}
    pass[$i]=${users[$i]#*:}
  done
}

create_backup_folder() {
  # create backup folder:
  mkdir -p "$backupfolder"
  [ $? -eq 0 ] || error_exit "ERROR: Backupfolder could not be created."

  # check if backupfolder is writable
  [ -w "$backupfolder" ] || error_exit "ERROR: Backupfolder is not writable."

  day=$(date +"${backupfile_date_extension}")
  backupfolder_day="${backupfolder}/calcardbackup${day}"
  mkdir -p "${backupfolder_day}"
}

get_calendars() {
  # Get details of calendars from database
  query_row_principaluri="select $row_principaluri from $table_calendars order by id"
  query_row_uri="select $row_uri from $table_calendars order by id"
  query_row_displayname="select $row_displayname from $table_calendars order by id"
  case "$dbtype" in
    mysql)
      while read calline
      do
        principal+=("$calline")
      done < <(mysql $mysql_options "${query_row_principaluri}" | sed 's/principals\/users\///')
      while read calline
      do
        uri+=("$calline")
      done < <(mysql $mysql_options "${query_row_uri}")
      while read calline
      do
        displayname+=("$calline")
      done < <(mysql $mysql_options "${query_row_displayname}")
    ;;
    sqlite3)
      while read calline
      do
        principal+=("$calline")
      done < <(sqlite3 "${sqlite3_database}" "${query_row_principaluri}" | sed 's/principals\/users\///')
      while read calline
      do
        uri+=("$calline")
      done < <(sqlite3 "${sqlite3_database}" "${query_row_uri}")
      while read calline
      do
        displayname+=("$calline")
      done < <(sqlite3 "${sqlite3_database}" "${query_row_displayname}")
    ;;
  esac

  # Get calendars and save them in backup-folder:
  echo "+  Starting backup. Please be patient: Depending on the size of calendars or addressbooks this may take a while..."

  # counter for exported calendars (if no calendar was exported there is no valid nextcloud user in users.txt):
  exported=0

  # Check whether database returned 0 entries (meaning there is not a single calendar):
  if [ ${#uri[@]} == 0  ]; then
    echo "-- INFO: Couldn't find a single calendar in your ${productname}!"
    # exported=1 though nothing exported, because we want to go on and look for addressbooks
    exported=1
  fi

  count=${#uri[@]}
  for (( i=0; i<$count; i++ ))
  do
    for index in "${!users[@]}"
    do
      if [ "${principal[$i]}" == "${user[$index]}" ] && [ "${uri[$i]}" != "contact_birthdays" ]; then
        filename=${displayname[$i]// /_}
        printf "+  Saving calendar ${principal[$i]}-${filename}.ics..."
        curl -s $trust -o "${backupfolder_day}/${principal[$i]}-${filename}.ics" -u "${user[$index]}":"${pass[$index]}" "${nextcloud_url}/remote.php/${caldav}/calendars/${user[$index]}/${uri[$i]}?export"
        err=$?
        if [ $err -ne 0 ]; then
          curl_error
        fi
        # check for ics-header in received file:
        if [ ! $(head -n1 "${backupfolder_day}/${principal[$i]}-${filename}.ics" | grep "BEGIN:VCALENDAR") ]; then
          mv "${backupfolder_day}/${principal[$i]}-${filename}.ics" "${backupfolder_day}/${principal[$i]}-${filename}.ics-ERROR.txt"
          printf "\n"
          error_exit "ERROR: the saved file is not a valid calendar-file. Something went wrong." "My guess: either wrong configured URL to ${productname} or a wrong combination of username/password in users.txt." "You may also want to check the saved file for any hints what went wrong: ${backupfolder_day}/${principal[$i]}-${filename}.ics-ERROR.txt"
        fi
        exported=$((exported + 1))
        printf "...success!\n"
        break
      fi
    done
  done

  # there is no matching Nextcloud user, if no calendar has been exported.
  if [ $exported == 0 ]; then
    error_exit "ERROR: no match between given users in file 'users.txt' and registered ${productname} users!" "You need to check '${userstxt_path}/users.txt'!"
  fi
}

get_addressbooks() {

  # unset arrays, so we can start to fill them again with addressbooks details:
  unset principal
  unset uri
  unset displayname

  # Get details of adressbooks from database
  query_row_principaluri="select $row_principaluri from $table_addressbooks order by id"
  query_row_uri="select $row_uri from $table_addressbooks order by id"
  query_row_displayname="select $row_displayname from $table_addressbooks order by id"
  case "$dbtype" in
    mysql)
      while read calline
      do
        principal+=("$calline")
      done < <(mysql $mysql_options "${query_row_principaluri}" | sed 's/principals\/users\///')
      while read calline
      do
        uri+=("$calline")
      done < <(mysql $mysql_options "${query_row_uri}")
      while read calline
      do
        displayname+=("$calline")
      done < <(mysql $mysql_options "${query_row_displayname}")
    ;;
    sqlite3)
      while read calline
      do
        principal+=("$calline")
      done < <(sqlite3 "${sqlite3_database}" "${query_row_principaluri}" | sed 's/principals\/users\///')
      while read calline
      do
        uri+=("$calline")
      done < <(sqlite3 "${sqlite3_database}" "${query_row_uri}")
      while read calline
      do
        displayname+=("$calline")
      done < <(sqlite3 "${sqlite3_database}" "${query_row_displayname}")
    ;;
  esac

  # no need for an exported file counter, because already done in calendar section

  count=${#uri[@]}
  for (( i=0; i<$count; i++ ))
  do
    for index in "${!users[@]}"
    do
      if [ "${principal[$i]}" == "${user[$index]}" ]; then
        filename=${displayname[$i]// /_}
        printf "+  Saving addressbook ${principal[$i]}-${filename}.vcf..."
        curl -s $trust -o "${backupfolder_day}/${principal[$i]}-${filename}.vcf" -u "${user[$index]}":"${pass[$index]}" "${nextcloud_url}/remote.php/${carddav}/addressbooks/${extra_users}${user[$index]}/${uri[$i]}?export"
        err=$?
        if [ ! $err -eq 0 ]; then
          curl_error
        fi

        # check if we received a file, since nextcloud doesn't export empty addressbooks:
        if [ ! -r "${backupfolder_day}/${principal[$i]}-${filename}.vcf" ]; then
          printf "...not saved. Addressbook '${displayname[$i]}' of user '${principal[$i]}' is empty.\n"
          break
        fi

        # check for vcf-header in received file:
        if [ ! $(head -n1 "${backupfolder_day}/${principal[$i]}-${filename}.vcf" | grep "BEGIN:VCARD") ]; then
          mv "${backupfolder_day}/${principal[$i]}-${filename}.vcf" "${backupfolder_day}/${principal[$i]}-${filename}.vcf-ERROR.txt"
          printf "\n"
          error_exit "ERROR: the saved file is not a valid vcard-file. Something went wrong." "My guess: either wrong configured URL to ${productname} or a wrong combination of username/password in users.txt." "You may also want to check the saved file for any hints what went wrong: ${backupfolder_day}/${principal[$i]}-${filename}.vcf-ERROR.txt"
        fi
        printf "...success!\n"
        break
      fi
    done
  done
}

dump_database() {
  if [ "$backup_database" == "yes" ]; then
    printf "+  Backing up database..."
    case "$dbtype" in
      mysql)
        mysqldump --lock-tables --host=${dbhost} --user=${dbuser} --password=${dbpassword} --databases ${dbname} > "${backupfolder_day}/${productname}_mysql_backup.sql"
      ;;
      sqlite3)
        cp -a "${sqlite3_database}" "${backupfolder_day}/"
      ;;
    esac
    printf "...success!\n"
  else
    echo "+  Not backing up ${productname} database."
  fi
}

pack_it() {
  # run hook?
  [ "$hook" = "yes" ] && run_hook precompress "${backupfolder_day}"

  echo "+  Compressing backup as *.${compression_method} file with compression level ${compression_level}. Be patient - this may take a while."
  working_dir=$(pwd)
  cd "$backupfolder"
  if [ "${compression_method}" == "zip" ]; then
    # zip folder with backed up files:
    zip -r -q -${compression_level} "calcardbackup${day}.zip" "calcardbackup${day}"
    [ $? -eq 0 ] || compress_error="1"
  else
    # use tar.gz to compress backed up files (piped to gzip to be able to use compression_level):
    tar -c "calcardbackup${day}" | gzip -f -${compression_level} > "calcardbackup${day}.tar.gz"
    [ $? -eq 0 ] || compress_error="1"
  fi
  [ "$compress_error" == "1" ] && error_exit "ERROR: Compressing the files produced an error. See lines right above."
  cd "$working_dir"
  rm -r "$backupfolder_day"
  echo "+  Backup successfully compressed!"
  echo "+  Find your backup here: ${backupfolder}/calcardbackup${day}.${compression_method}"
}

delete_old_backups() {
  if [ "$delete_backups_older_than" -ge 1 ]; then
    deleted=$(find "${backupfolder}"/calcardbackup-* -type f -mtime +${delete_backups_older_than} -delete -exec echo "+   " {} \;)
    if [ "$?" -ne 0 ]; then
      printf "\n"
      error_exit "ERROR: deleting backups older than ${delete_backups_older_than} days produced above error."
    elif [ "$deleted" != "" ]; then
      echo "+  Those backups older than ${delete_backups_older_than} days have been deleted:"
      echo "${deleted}"
    else
      echo "+  No backups older than ${delete_backups_older_than} days found to delete."
    fi
  else
    echo "+  Not deleting any older backups as configured."
  fi
}

run_hook() {
  ${script_dir}/hook "$@"
}

finish() {
  # run hook?
  [ "$hook" = "yes" ] && run_hook prefinish "${backupfolder}/calcardbackup${day}.${compression_method}"

  # print timestamp
  echo "+  $(date) --> END calcardbackup"
  echo "+"
  echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo
}

curl_error() {
  if [ "${cerror}" -eq 6 ]; then
    if [ "$nextcloud_url" == "$nextcloud_url_overwrite" ]; then
      problem="Either that host is temporarily unavailable or 'overwrite.cli.uri' in ${configphp} is wrong."
    else
      problem="Either that host is temporarily unavailable or nextcloud_url in '${config_path}/calcardbackup.conf' is wrong."
    fi
    error_exit "ERROR: Curl error 6: could not resolve host ${nextcloud_url}." "${problem}"
  elif [ "${cerror}" -eq 60 ]; then
    error_exit "ERROR: Curl error 60: cannot authenticate peer certificate with known CA certificates." "You need to configure trustful_certificate=\"no\" in config file '${config_path}/calcardbackup.conf'"
  fi
  error_exit "ERROR: Curl cannot get the requested file. This can have various reasons." "For clarification lookup Curl Error number ${cerror}"
}

error_exit() {
  echo "--" >&2
  for message in "$@"; do
    echo "-- ${message}" >&2
    hook_error_message="${hook_error_message}${message}\n"
  done

  # run hook?
  [ "$hook" = "yes" ] && run_hook on_error "${hook_error_message}"

  echo "-- Exiting." >&2
  echo "--" >&2
  echo "-------------  Errors occured. See messages above!  -------------" >&2
  echo >&2
  exit 1
}

preparations
read_config_php
read_status_php
get_database_details
read_users_txt
create_backup_folder
get_calendars
get_addressbooks
dump_database
pack_it
delete_old_backups
finish

exit 0
